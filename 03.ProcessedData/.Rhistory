getwd()
##### load libraries
library (openxlsx)
library(lattice)
library (DataExplorer) # https://datascienceplus.com/blazing-fast-eda-in-r-with-dataexplorer/
library(corrplot)
library(dplyr)
#### Variables
filename <- paste("collected",".xlsx", sep = "")
#### Load dataset
hd = read.xlsx(filename, detectDates= TRUE)
temp <- hd %>%
group_by(date, failure) %>%
summarize(count=n())
xyplot(count~date, temp, type="l", auto.key=TRUE, main="Distribution of Observations over Time", ylab="Observations")
count(hd, failure)
xyplot(count~date, temp, groups=failure, type="l", auto.key=TRUE, main="Distribution of Failed (1) vs OK (0) Hard Drives over Time", ylab="NUmber of Hard Drives")
summary(hd [6:ncol(hd)])
missingHD <- colSums(is.na(hd))/nrow(hd)*100
barchart(sort(missingHD,decreasing = TRUE), xlab = "% of missing values", main="Missing Values in Data Columns")
varHD <- apply(hd, 2, var,na.rm=TRUE)
noVar <- varHD[!is.na(varHD)]
# removing columns with > 90% missing values, 0 variance, and -Normalized variables
t <- hd[,missingHD <90]
t <- t[, -which(names(t) %in% names(noVar[noVar==0]))]
t <- t[, -grep("normalized$", colnames(t))]
t$naVal <- rowSums(is.na(t))
xyplot(naVal~date, t, type="l", main="Volume of NAs across Time", auto.key = TRUE, xlab="Date", ylab="Count of columns with NA values")
a <- cor(t[6:32], use = "pairwise.complete.obs")
corrplot(a, method="square")
colnames9T
colnames(9T)t
colnames(t)
?boxplot
?bwplot
All_Graph <- bwplot( ~ smart_12_raw,     # use interaction
data=t,
scales=list(relation="free",x=list(cex=1.1),y=list(cex=1.25)),
main= list("All Metric Values", cex=2.5),
xlab=list("Treatments", cex=2.5),
ylab=list("Metric Value", cex=2.5),
do.out = FALSE,
col="black",
coef=4
)
trel_wid <- 1500
trellis.device(device="png", filename="All Var+Lev Plots.png", width= trel_wid, height= trel_wid*1.5)
print(All_Graph)
bwplot( ~ smart_12_raw,     # use interaction
data=t,
scales=list(relation="free",x=list(cex=1.1),y=list(cex=1.25)),
main= list("All Metric Values", cex=2.5),
xlab=list("Treatments", cex=2.5),
ylab=list("Metric Value", cex=2.5),
do.out = FALSE,
col="black",
coef=4
)
View(All_Graph)
rm(All_Graph)
head(t)
library(lattice)
t1 <- t
bw(smart_199_raw, data=t1)
bwplot(smart_199_raw, data=t1)
t1
colnames(t1)
bwplot(smart_195_raw, data=t1)
bwplot(~smart_195_raw, data=t1)
bwplot(~smart_195_raw + smart_7_raw, data=t1)
bwplot(~t1[,4], data=t1)
bwplot(~t1[,5], data=t1)
bwplot(~smart_1_raw, data=t1)
bwplot(~colnames(t1)[5], data=t1)
bwplot(colnames(t1)[5], data=t1)
bwplot(~smart_1_raw + smart_4_raw, data=t1)
ncol(t1)
bwplot(~smart_1_raw | smart_4_raw, data=t1)
?bwplot.by.var
install.packages("rgr")
librar(rgr)
library(rgr)
bwplot.by.var(t1[,5:7])
bwplot.by.var
?rgr
bwplots.by.var(t1[,5:7])
bwplots.by.var(t1[,5:33])
bwplots.by.var(t1[,5:10])
bwplots.by.var(t1[,5:8])
bwplots.by.var(t1[,5:7])
t1[,5:7]
colnames(t1[,5:7])
?bwplot
?bwplot
bwplot(t1$smart_1_raw, data=t1)
bwplot(t1[,5], data=t1)
bwplot(t1[,5:8], data=t1)
bwplot(t1[,7], data=t1)
?fot
?for
for (i in 5:7) {
bwplot( t[,i],     # use interaction
data=t,
main= list(colnames(t)[i], cex=2.5),
xlab=list("Treatments", cex=2.5),
ylab=list("Metric Value", cex=2.5),
do.out = FALSE,
col="black",
coef=4
)
for (i in 5:7) {
bwplot( t[,i],     # use interaction
data=t,
main= list(colnames(t)[i], cex=2.5),
xlab=list(colnames(t)[i], cex=2.5),
ylab=list("Metric Value", cex=2.5),
do.out = FALSE,
col="black",
coef=4
)
}
for (i in 5:7) {
bwplot( t[,i], data=t, ylab=colnames(t)[i]
)
}
for (i in 5:7) {
bwplot( t[,i], data=t, ylab=colnames(t)[i])
print(colnames(t)[5])
}
for (i in 5:7) {
bwplot( t[,i], ylab=colnames(t)[i])
print(colnames(t)[5])
}
for (i in 5:7) {
bwplot( t[,i], main=colnames(t)[i])
print(colnames(t)[5])
}
for (i in 5:7) {
bwplot( t[,i], main=colnames(t)[i])
print(colnames(t)[i])
}
?bwplot
bwplot( ~ smart_12_raw,     # use interaction
data=t,
ylab=colnames(t)[1])
bwplot( ~ smart_12_raw,     # use interaction
data=t, main=colnames(t)[1])
bwplot( ~ smart_12_raw,     # use interaction
data=t, xlab =colnames(t)[1])
for (i in 5:7) {
bwplot( t[,i], main=colnames(t)[i])
print(colnames(t)[i])
}
bwplot( t[,6], main=colnames(t)[6])
for (i in 5:7) {
bwplot( t[,i], main=colnames(t)[i])
}
for (i in 5:7) {
tPlot <- bwplot(t[,i], main=colnames(t)[i])
display(tPlot)
}
for (i in 5:7) {
tPlot <- bwplot(t[,i], main=colnames(t)[i])
}
View(tPlot)
tPlot.show()
show(tPLot)
show(tPlot)
for (i in 5:7) {
tPlot <- bwplot(t[,i], xlab=colnames(t)[i])
show(tPlot)
}
for (i in 5:32) {
tPlot <- bwplot(t[,i], ylab="Values", main==colnames(t)[i])
show(tPlot)
}
library (openxlsx)
library(lattice)
library (DataExplorer) # https://datascienceplus.com/blazing-fast-eda-in-r-with-dataexplorer/
library(corrplot)
library(dplyr)
for (i in 5) {
d1 <- t[,i]
d1 <- d1[!is.na(d1)]
n <- colnames(t)[i]
tPlot <- bwplot(d1, ylab="Values", main=n)
show(tPlot)
}
for (i in 5ï¼š32) {
d1 <- t[,i]
d1 <- d1[!is.na(d1)]
n <- colnames(t)[i]
tPlot <- bwplot(d1, ylab="Values", main=n)
show(tPlot)
}
for (i in 5:32) {
d1 <- t[,i]
d1 <- d1[!is.na(d1)]
n <- colnames(t)[i]
tPlot <- bwplot(d1, ylab="Values", main=n)
show(tPlot)
}
##### load libraries
library (openxlsx)
library(lattice)
library (DataExplorer) # https://datascienceplus.com/blazing-fast-eda-in-r-with-dataexplorer/
library(corrplot)
library(dplyr)
#### Variables
filename <- paste("collected",".xlsx", sep = "")
#### Load dataset
hd = read.xlsx(filename, detectDates= TRUE)
temp <- hd %>%
group_by(date, failure) %>%
summarize(count=n())
xyplot(count~date, temp, type="l", auto.key=TRUE, main="Distribution of Observations over Time", ylab="Observations")
count(hd, failure)
xyplot(count~date, temp, groups=failure, type="l", auto.key=TRUE, main="Distribution of Failed (1) vs OK (0) Hard Drives over Time", ylab="NUmber of Hard Drives")
summary(hd [6:ncol(hd)])
missingHD <- colSums(is.na(hd))/nrow(hd)*100
barchart(sort(missingHD,decreasing = TRUE), xlab = "% of missing values", main="Missing Values in Data Columns")
varHD <- apply(hd, 2, var,na.rm=TRUE)
noVar <- varHD[!is.na(varHD)]
# removing columns with > 90% missing values, 0 variance, and -Normalized variables
t <- hd[,missingHD <90]
t <- t[, -which(names(t) %in% names(noVar[noVar==0]))]
t <- t[, -grep("normalized$", colnames(t))]
for (i in 5:32) {
d1 <- t[,i]
d1 <- d1[!is.na(d1)]
n <- colnames(t)[i]
bwplot(d1, xlab="Values", ylab="", main=n)
}
t$naVal <- rowSums(is.na(t))
xyplot(naVal~date, t, type="l", main="Volume of NAs across Time", auto.key = TRUE, xlab="Date", ylab="Count of columns with NA values")
a <- cor(t[6:32], use = "pairwise.complete.obs")
corrplot(a, method="square")
t[,smart_251_raw]
t[,"smart_251_raw"]
?
sd
a <- cor(t[6:32], use = "pairwise.complete.obs", method="spearman")
corrplot(a, method="square")
